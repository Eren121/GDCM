/**
 * \page DoxyDevelInstal Developpers workspace
 * There is no further requirements than the ones of \ref DoxyInstallation.
 * But the developpers generally have further needs than the library user
 * like :
 * - in place debugging (in place as opposed to fully
 *   installed, i.e. when working in the cvs hierarchy or in the hierarchy
 *   build from gdcm source tar ball).
 * - tests of features
 * - test suite usage (typically after code modifications and prior to
 *   commit).
 * .
 * In the following we shall assume that gdcm is allready compiled-
 * BUT not installed- in a directory named <TT>GDCM_HOME</TT>.
 * 
 * \section DoxyDevelInstalCPlusPlus Working with C++
 *   The kernel library uses the environnement variable
 *   <TT>GDCM_DICT_PATH</TT> as a path to the location of the default 
 *   Dicom dictionary. Hence if you which to work/debug a code based
 *   on gdcm, you first need to positionate this variable. When omitting
 *   this you should get the following message:
 * <TT>gdcmDict::gdcmDict: can't open dictionary /usr/local/share/gdcm/dicomV3.dic</TT>
 *   
 *   Suppose you want to launch some C++ demo/test program, that
 *   gets compiled with the kernel, e.g. PrintHeader. One can do 
 *    - <TT>cd GDCM_HOME</TT>
 *    - <TT>export GDCM_DICT_PATH=`pwd`/Dicts</TT>
 *    - <TT>cd Test</TT>
 *    - <TT>./PrintHeader</TT>
 *    .
 * \section DoxyDevelInstalPython Working with Python
 *    - <TT>cd GDCM_HOME</TT>
 *    - <TT>./autogen.sh --enable-python</TT> 
 *    - <TT>make</TT>
 *    - <TT>export PYTHONPATH=`pwd`</TT>
 *    - <TT>cd gdcmPython</TT>
 *    - <TT>ln -s .libs/pygdcm.so _gdcm.so</TT> (this is because automake
 *      doesn't allow the building of libraries whose name starts with an
 *      underscore. Since we need the wrapper library to be named _gdcm
 *      [because swig automaticatily uses this name when building the
 *       shadow classes], automake generates pygdcm.so and at install stage
 *       stage renames it to _gdcm.so).
 *    - You can then use gdcmPython for manual test/demos
 *       -# <TT>cd GDCM_HOME/gdcmPython/demo</TT>
 *       -# <TT>python PrintHeader.py</TT>
 *        .
 *    - You can also run the gdcm test suite, which is written in Python:
 *       -# first you need to install the Dicom data files used by the
 *          test suite. The cvs access point is
 *          <TT>:pserver:anonymous@cvs.creatis.insa-lyon.fr:2402/cvs/public</TT>
 *          and the name of the module is <TT>gdcmData</TT>.
 *          Checkout this module in <TT>GDCM_HOME</TT> directory
 *       -# <TT>cd GDCM_HOME/gdcmPython/</TT>
 *       -# <TT>python testSuite.py</TT>
 *        .
 *     .
 */
