/* src/libjasper/include/jasper/jas_config.h.in.  Template for cmake.  */


/* Avoid problems due to multiple inclusion. */
#ifndef JAS_CONFIG_H
#define JAS_CONFIG_H

#if 0
/* Extra debugging support */
#undef DEBUG

/* Debugging memory allocator */
#undef DEBUG_MEMALLOC

/* Debugging overflow detection */
#undef DEBUG_OVERFLOW
#endif

/* Define to 1 if you have the <dlfcn.h> header file. */
#cmakedefine HAVE_DLFCN_H

/* Define to 1 if you don't have `vprintf' but do have `_doprnt.' */
/* #undef HAVE_DOPRNT */

/* Define to 1 if you have the <fcntl.h> header file. */
#cmakedefine HAVE_FCNTL_H

/* Define to 1 if you have the <inttypes.h> header file. */
#cmakedefine HAVE_INTTYPES_H

/* Define to 1 if you have the <io.h> header file. */
#cmakedefine HAVE_IO_H

/* Define to 1 if you have the `m' library (-lm). */
/* #define HAVE_LIBM 1 */

/* Define to 1 if you have the <limits.h> header file. */
#cmakedefine HAVE_LIMITS_H

/* Define to 1 if you have the <memory.h> header file. */
#cmakedefine HAVE_MEMORY_H

/* Define to 1 if you have the <stdbool.h> header file. */
#cmakedefine HAVE_STDBOOL_H

/* Define to 1 if you have the <stddef.h> header file. */
#cmakedefine HAVE_STDDEF_H

/* Define to 1 if you have the <stdint.h> header file. */
#cmakedefine HAVE_STDINT_H

/* Define to 1 if you have the <stdlib.h> header file. */
#cmakedefine HAVE_STDLIB_H

/* Define to 1 if you have the <strings.h> header file. */
#cmakedefine HAVE_STRINGS_H

/* Define to 1 if you have the <string.h> header file. */
#cmakedefine HAVE_STRING_H

/* Define to 1 if you have the <sys/stat.h> header file. */
#cmakedefine HAVE_SYS_STAT_H

/* Define to 1 if you have the <sys/types.h> header file. */
#cmakedefine HAVE_SYS_TYPES_H

/* Define to 1 if you have the <unistd.h> header file. */
#cmakedefine HAVE_UNISTD_H

/* Have variable length arrays */
/* #define HAVE_VLA 1 */

/* Define to 1 if you have the `vprintf' function. */
/* #define HAVE_VPRINTF 1 */

/* Define to 1 if you have the <windows.h> header file. */
#cmakedefine HAVE_WINDOWS_H

/* JasPer configure */
#define JAS_CONFIGURE 1

/* JasPer version */
#define JAS_VERSION "@JAS_VERSION@"

/* Name of package */
#define PACKAGE "jasper"

/* Define to the address where bug reports for this package should be sent. */
#define PACKAGE_BUGREPORT ""

/* Define to the full name of this package. */
#define PACKAGE_NAME "jasper"

/* Define to the full name and version of this package. */
#define PACKAGE_STRING "jasper @JAS_VERSION@"

/* Define to the one symbol short name of this package. */
#define PACKAGE_TARNAME "jasper"

/* Define to the version of this package. */
#define PACKAGE_VERSION "@JAS_VERSION@"

/* Size of fundamental data types.  */
/* The size of a `int', as computed by sizeof. */
#define SIZEOF_INT    @GDCM_SIZEOF_INT@

/* The size of a `long', as computed by sizeof. */
#define SIZEOF_LONG   @GDCM_SIZEOF_LONG@

/* The size of a `short', as computed by sizeof. */
#define SIZEOF_SHORT  @GDCM_SIZEOF_SHORT@

/* The size of a `char', as computed by sizeof. */
#define SIZEOF_CHAR   @GDCM_SIZEOF_CHAR@

/* The size of a `double', as computed by sizeof. */
#define SIZEOF_DOUBLE @GDCM_SIZEOF_DOUBLE@

/* The size of a `float', as computed by sizeof. */
#define SIZEOF_FLOAT  @GDCM_SIZEOF_FLOAT@

/* Could someone give me an example of plateform that have 
 * different size for unsigned types ?? */
/* The size of a `unsigned int', as computed by sizeof. */
#define SIZEOF_UNSIGNED_INT @GDCM_SIZEOF_INT@

/* The size of a `unsigned long', as computed by sizeof. */
#define SIZEOF_UNSIGNED_LONG @GDCM_SIZEOF_LONG@

/* The size of a `unsigned short', as computed by sizeof. */
#define SIZEOF_UNSIGNED_SHORT @GDCM_SIZEOF_SHORT@


/* Define size of long long and/or __int64 bit integer type only if the type
   exists.  */
/* The size of a `long long', as computed by sizeof. */
#cmakedefine GDCM_SIZEOF_LONG_LONG @GDCM_SIZEOF_LONG_LONG@
#cmakedefine GDCM_SIZEOF___INT64   @GDCM_SIZEOF___INT64@

/* The size of a `unsigned long long', as computed by sizeof. */
#define SIZEOF_UNSIGNED_LONG_LONG @GDCM_SIZEOF_LONG_LONG@



#if 0
/* Define to 1 if you have the ANSI C header files. */
#define STDC_HEADERS 1
#endif

/* Version number of package */
#define VERSION "1.701.0"

/* Define to 1 if your processor stores words with the most significant byte
   first (like Motorola and SPARC, unlike Intel and VAX). */
#cmakedefine WORDS_BIGENDIAN

/* Define to 1 if the X Window System is missing or not being used. */
/*#define X_DISPLAY_MISSING 1 */

/* Define to empty if `const' does not conform to ANSI C. */
/* #undef const */

/* Define as `__inline' if that's what the C compiler calls it, or to nothing
   if it is not supported. */
/* #undef inline */

/* Whether types "long long" and "__int64" are enabled.  If a type is
   enabled then it is a unique fundamental type.  */
#cmakedefine GDCM_TYPE_USE_LONG_LONG
#cmakedefine GDCM_TYPE_USE___INT64

/* Some properties of the available types.  */
#cmakedefine GDCM_TYPE_SAME_LONG_AND___INT64
#cmakedefine GDCM_TYPE_SAME_LONG_LONG_AND___INT64
#cmakedefine GDCM_TYPE_CONVERT_UI64_TO_DOUBLE


// On win32 there is no long long therefore use __int64 instead
//
#ifndef HAVE_SYS_TYPES_H
typedef unsigned short     ushort;
typedef unsigned int       uint;
typedef unsigned long      ulong;
#ifdef GDCM_TYPE_USE___INT64
typedef unsigned char      uchar;
typedef unsigned __int64   ulonglong;
typedef __int64            longlong;
#else
#error this is not supposed to happen please report your compiler
#endif //GDCM_TYPE_USE___INT64
#else
#cmakedefine HAVE_GDCM_SIZEOF_UINT
#cmakedefine HAVE_GDCM_SIZEOF_USHORT
#cmakedefine HAVE_GDCM_SIZEOF_ULONG

#ifdef GDCM_TYPE_USE_LONG_LONG
#ifndef HAVE_GDCM_SIZEOF_USHORT
typedef unsigned short     ushort;
#endif
#ifndef HAVE_GDCM_SIZEOF_UINT
typedef unsigned int       uint;
#endif
#ifndef HAVE_GDCM_SIZEOF_ULONG
typedef unsigned long      ulong;
#endif
typedef unsigned char      uchar;
typedef unsigned long long ulonglong;
typedef long long          longlong;
#else
typedef unsigned short     ushort;
typedef unsigned int       uint;
typedef unsigned long      ulong;
typedef unsigned char      uchar;
typedef unsigned __int64   ulonglong;
typedef __int64            longlong;
#endif // GDCM_TYPE_USE_LONG_LONG
/* #define  ssize_t    int */
#endif // HAVE_SYS_TYPES_H


#endif

